#include <iostream>
#include <bits/stdc++.h>
 
using namespace std;
 
struct edge {
    int l, r, p;
    edge (int l, int r, int p) : l(l), r(r), p(p) {}
};
 
vector<edge> edges;
 
int main()
{
    int n, m, l, r, p;
    cin>>n>>m;
    vector<long long> dist(n+1, 0);
    vector<int> pred(n+1, -1);
    for (int i=0; i<m; i++) {
        cin>>l>>r>>p;
        edges.push_back(edge(l, r, p));
    }
    int x;
    for (int i = 1; i <= n; i++) {
        x = -1;
        for (auto e : edges) {
            if (dist[e.l] + e.p < dist[e.r]) {
                dist[e.r] = dist[e.l] + e.p;
                pred[e.r] = e.l;
                x = e.r;
            }
        }
    }
    if (x == -1)
        cout<<"NO";
    else  {
        for (int i=0; i<n; i++)
            x = pred[x];
        cout<<"YES\n";
        vector<int> cycle;
 
		for(int v = x; ; v = pred[v])
		{
			cycle.push_back(v);
			if(v == x and cycle.size() > 1)
				break;
		}
 
		reverse(cycle.begin(), cycle.end());
		for(auto v: cycle)
		{
			cout << v << " ";
		}
    }
 
    return 0;
}