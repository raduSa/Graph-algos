#include <iostream>
#include <bits/stdc++.h>

using namespace std;

int n, m;
vector<vector<pair<long long, long long>>> graph;
priority_queue<pair<long long, long long>, vector<pair<long long, long long>>, greater<pair<long long, long long>>> pq;

int main()
{
    int l, r, p;
    cin >> n >> m;
    vector<long long> dist(n + 1, 0);
    graph.resize(n + 1);
    for (int i = 0; i < m; i++) {
        cin >> l >> r >> p;
        graph[l].push_back(make_pair(p, r));
    }
    for (auto p : graph[1])
        pq.push(p);
    int found = 1;
    while (found < n) {
        auto aux = pq.top();
        pq.pop();
        long long price = aux.first;
        int dest = aux.second;
        if (!dist[dest] && dest != 1) {
            dist[dest] = price;
            for (auto node : graph[dest])
                if (!dist[node.second])
                    pq.push(make_pair(price + node.first, node.second));
            found++;
        }
    }
    for (int i = 1; i <= n; i++)
        cout << dist[i] << " ";
    return 0;
}