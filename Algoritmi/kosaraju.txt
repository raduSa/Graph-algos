#include <bits/stdc++.h>
 
using namespace std;
 
vector<vector<int>> graph;
vector<vector<int>> invGraph;
vector<bool> visited;
vector<int> st;
vector<int> rez;
int kingCnt;
 
void dfs(int curr) {
    visited[curr] = 1;
    for (auto node : graph[curr])
        if (!visited[node])
            dfs(node);
    st.push_back(curr);
}
 
void dfsInv(int curr) {
    visited[curr] = 1;
    for (auto node : invGraph[curr])
        if (!visited[node])
            dfsInv(node);
    rez[curr] = kingCnt;
}
 
int main()
{
    int n, m;
    cin >> n >> m;
    graph.resize(n + 1);
    invGraph.resize(n + 1);
    rez.resize(n + 1);
    visited.assign(n + 1, 0);
    int l, r;
    for (int i = 0; i < m; i++) {
        cin >> l >> r;
        graph[l].push_back(r);
        invGraph[r].push_back(l);
    }
    // topological sort
    for (int i = 1; i <= n; i++) {
        if (!visited[i])
            dfs(i);
    }
    // check for CCS in inv graph
    int cnt = n;
    for (int i = 1; i <= n; i++)
        visited[i] = 0;
    while (!st.empty()) {
        int startNode = st.back();
        st.pop_back();
        if (!visited[startNode]) {
            kingCnt++;
            dfsInv(startNode);
        }  
        else cnt--;
    }
    cout << cnt << endl;
    for (int i = 1; i <= n; i++)
        cout << rez[i] << " ";
    return 0;
}