#include <iostream>
#include <bits/stdc++.h>

using namespace std;

int n, m;
vector<bool> visited;
vector<bool> inStack;
vector<vector<int>> graph;
vector<int> res;
bool resCompleted = false;
vector<int> dist;
vector<int> parent;

bool dfs(int curr) {
    if (inStack[curr])
        return true;
    inStack[curr] = true;
    for (auto node : graph[curr])
        if (!visited[node])
            if (dfs(node))
                return true;
    visited[curr] = true;
    inStack[curr] = false;
    res.push_back(curr);
    return false;
}
int main()
{
    cin >> n >> m;
    graph.resize(n + 1);
    dist.resize(n + 1);
    dist[1] = 0;
    for (int i = 2; i <= n; i++) {
        dist[i] = -1;
    }
    parent.resize(n + 1);
    for (int i = 1; i <= n; i++) {
        parent[i] = i;
    }
    for (int i = 0; i < n + 1; i++) {
        visited.push_back(0);
        inStack.push_back(0);
    }

    int l, r;
    for (int i = 0; i < m; i++) {
        cin >> l >> r;
        graph[l].push_back(r);
    }
    // top sort starting only from 1
    if (dfs(1)) {
        cout << "IMPOSSIBLE";
        return 0;
    }
    reverse(res.begin(), res.end());
  
    for (int curr : res) {
        for (int node : graph[curr]) {
            if (dist[node] < dist[curr] + 1) {
                parent[node] = curr;
                dist[node] = dist[curr] + 1;
            }
        }
    }

    if (dist[n] != -1) {
        vector<int> path;
        int curr = n;
        while (curr != 1) {
            path.push_back(curr);
            curr = parent[curr];
        }
        path.push_back(1);
        reverse(path.begin(), path.end());
        cout << path.size() << endl;
        for (auto el : path)
            cout << el << " ";
    }
    else 
        cout << "IMPOSSIBLE";
    return 0;
}