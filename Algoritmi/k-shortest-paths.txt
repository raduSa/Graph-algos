// find k shortest paths from 1 to n
#include <iostream>
#include <bits/stdc++.h>
 
using namespace std;
 
int main()
{
    int n, m, l, r, p, k;
    cin>>n>>m>>k;
    vector<vector<pair<int, int>>> graph(n+1);
    vector<priority_queue<long long>> dist(n+1);
    for (int i=0; i<m; i++) {
        cin>>l>>r>>p;
        graph[l].push_back({p, r});
    }
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
    pq.push({0, 1});
    while (!pq.empty()) {
        auto curr = pq.top();
        pq.pop();
        long long curr_price = curr.first;
        int curr_node = curr.second;
        if (dist[curr_node].size() == k && curr_price > dist[curr_node].top())
            continue;
        else {
            for (auto node : graph[curr_node])
            if (dist[node.second].size() < k || curr_price + node.first < dist[node.second].top()) {
                if (dist[node.second].size() == k)
                    dist[node.second].pop();
                dist[node.second].push(node.first + curr_price);
                pq.push({node.first + curr_price, node.second});
            }
 
        }
    }
    vector<long long> vals;
    for (int i=0; i<k; i++) {
        vals.push_back(dist[n].top());
        dist[n].pop();
    }
 
    reverse(vals.begin(), vals.end());
    for (auto val : vals)
        cout<<val<<" ";
    return 0;
}