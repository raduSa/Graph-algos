// min price of route 1-n, nr of such routes, min length, max length
#include <iostream>
#include <bits/stdc++.h>
 
using namespace std;
 
int n, m;
vector<vector<pair<long long, int>>> graph;
vector<long long> prices;
priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
vector<long long> ways;
vector<int> lenMin;
vector<int> lenMax;
long long mod = 1e9 + 7;
 
int main()
{
    cin>>n>>m;
    graph.resize(n+1);
    ways.resize(n+1);
    lenMin.resize(n+1);
    lenMax.resize(n+1);
    for (int i=0; i<n+1; i++) {
        prices.push_back(LLONG_MAX);
        lenMin.push_back(INT_MAX);
        lenMax.push_back(0);
    }
    prices[1] = 0;
    ways[1] = 1;
    lenMin[1] = 0;
    lenMax[1] = 0;
 
    int l, r, p;
    for (int i=0; i<m; i++) {
        cin>>l>>r>>p;
        graph[l].push_back({p, r});
    }
 
    pq.push({0, 1});
 
    while (!pq.empty()) {
        auto curr = pq.top();
        pq.pop();
        int curr_node = curr.second;
        long long curr_price = curr.first;
 
        for (auto node : graph[curr_node]) {
            long long new_price = curr_price + node.first;
            int new_node = node.second;
            if (new_price > prices[new_node])
                continue;
            else if (new_price < prices[new_node]) {
                prices[new_node] = new_price;
                ways[new_node] = ways[curr_node];
                lenMin[new_node] = lenMin[curr_node] + 1;
                lenMax[new_node] = lenMax[curr_node] + 1;
                if (new_node != n)
                    pq.push({new_price, new_node});
            }
            else {
                ways[new_node] = (ways[new_node] + ways[curr_node]) % mod;
                lenMin[new_node] = min(lenMin[new_node], lenMin[curr_node] + 1);
                lenMax[new_node] = max(lenMax[new_node], lenMax[curr_node] + 1);
            }
        }
    }
    cout<<prices[n]<<" "<<ways[n]<<" "<<lenMin[n]<<" "<<lenMax[n];
    return 0;
}